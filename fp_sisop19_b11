#include <sys/types.h>
#include <sys/stat.h>
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <syslog.h>
#include <string.h>
#include <pthread.h>

struct croninfo {
    int crontime[5];
    char path[512];
    char line[128];
};
struct croninfo cron[10];
int maxline;
const char* loc = "/home/iotatfan/FP_SISOP19_B11/crontab.data";

void execute() {
    char final[1024];
    // sprintf(final,"bash %s",cron.path);
    if(system(final)) {
        puts("u suck");
    }
    else {
        puts("success");
    }
}

int getconfig(int line,char config[]) {
    int i=0,cpy=0;
    char a[2];

    // puts(".");

    while(i < 5) {
        if(config[cpy]==' ') {
            cpy++;
        }
        else if(config[cpy]!='*') {
            a[0]=config[cpy];
            cron[line].crontime[i]=atoi(a);
            cpy++;
            i++;
        }  
        else {
            cron[line].crontime[i]=-1;
            cpy++;
            i++;
        }
        // puts(".");
    }

    char *path=strrchr(config,' ');
    strcpy(cron[line].path,path);
}


int getLines(FILE* file,int line) {
    char ch;
    int i=0;
    char config[128];
    pthread_t threads[10];
    memset(config,'\0',sizeof(config));

    while(fscanf(file,"%c",&ch)!=EOF) {
        if(ch=='\n') {
            strcpy(cron[line].line,config);
            getconfig(line,config);
            pthread_create(&threads[line],NULL,execute,(void *)cron[line]);
            maxline=line;
            line++;
            i=0;
            memset(config,'\0',sizeof(config));
        }
        else {
            config[i]=ch;
            i++;
        }
    }
    return 0;
}

int main() {
  pid_t pid, sid;
  int lastmod=0;
  char line[10];
  FILE* cronfile;

  pid = fork();

  if (pid < 0) {
    exit(EXIT_FAILURE);
  }

  if (pid > 0) {
    exit(EXIT_SUCCESS);
  }

  umask(0);

  sid = setsid();

  if (sid < 0) {
    exit(EXIT_FAILURE);
  }

  if ((chdir("/")) < 0) {
    exit(EXIT_FAILURE);
  }

  close(STDIN_FILENO);
  close(STDOUT_FILENO);
  close(STDERR_FILENO);

  while(1) {
     struct stat st;
        stat(loc,&st);

        if(lastmod!=st.st_mtime) {
            lastmod=st.st_mtime;
            
            int count=0;
            cronfile = fopen(loc,"r");

            getLines(cronfile,count);

            while(count<maxline) {
                // puts(cron[count].line);
                int i=0;
                while(i < 5) {
                    printf("%d ",cron[count].crontime[i]);
                    i++;
                }
                puts(cron[count].path);
                count++;
            }

            // puts(config);
            // execute();
        }
    
  }
  
  exit(EXIT_SUCCESS);
}
